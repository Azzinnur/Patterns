package structure_patterns.bridge;

import structure_patterns.bridge.devices.Device;
import structure_patterns.bridge.devices.Radio;
import structure_patterns.bridge.devices.Tv;
import structure_patterns.bridge.remotes.Remote;
import structure_patterns.bridge.remotes.RemoteControl;

/*
Тип паттерна: структурный.

Шаги реализации:
1. Определите ортогональные классы в приложении. Лучше всего применять паттерн для связки: абстракции и платформ,
   домена и инфраструктуры, фронтенда и бэкэнда, или интерфейса и имплементаций.
2. Укажите необходимые клиенту операции в базовом абстрактном классе (в данном случае -- это интерфейс Remote).
3. Операции доступные на всех платформах должны быть указаны в общем интерфейсе.
4. Создайте классы, переопределяющие все методы имплементированного общего интерфейса, по одному для каждой платформы.
5. Внутри абстрактного класса добавьте поле общего интерфейса (в конструктор). Абстрактный клас делегирует
   большую часть работы этому объекту.
6. Если присутствует несколько вариантов высокоуровневой логики, создайте абстракции для каждого варианта,
   расширяющие исходный абстрактный класс.
7. Код клиента должен передать объект имплементации в конструктор абстрактного класса (здесь -- интерфейса) и после
   работать уже с конкретной реализацией абстрактного класса.
 */
public class TestBridge {
    public static void main(String[] args) {
        testDevice(new Tv());
        testDevice(new Radio());

        String plus = """
                1. Можно создавать платформо-независимые классы и приложения.
                2. Клиентский код работает с высокоуровневыми абстракциями. Ему не нужно знать детали реализации.
                3. Реализация принципа открытости/закрытости. Вы можете внедрять новые абстракции и имплементации
                   вне зависимости друг от друга.
                4. Можно сосредоточится на высокоуровневой логике в абстракции и на конкретных особенностях платформы
                   в имплементации.
                """;

        String minus = """
                1. Можно сделать слишком сложный код, применяя паттерн к сильно связанным классам.
                """;

        System.out.println("Плюсы:\n" + plus);
        System.out.println("Минусы:\n" + minus);
    }

    public static void testDevice(Device device) {
        System.out.println("Tests with basic remote.");
        Remote basicRemote = new RemoteControl(device);
        basicRemote.power();
        device.printStatus();
        basicRemote.channelUp();
        basicRemote.power();
        basicRemote.mute();
        device.printStatus();
    }
}
