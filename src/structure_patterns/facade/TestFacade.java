package structure_patterns.facade;

import java.io.File;
/*
Тип паттерна: структурный.
Шаги использования:
1. Проверьте, можно ли использовать более простой интерфейс вместо существующего. Цель: чтобы этот интерфейс
   сделал код клиента независимым от многих классов-подсистем.
2. Объявите и имплементируйте этот интерфейс в новом классе-фасаде. Класс-фасад должен перенаправлять вызовы
   кода клиента в соответствующие объекты классов-подсистем. Фасад должен инициализировать подсистемы и
   управлять их дальнейшим жизненным циклом, вплоть до выполнения своей задачи.
3. Чтобы получить максимальный результат, код клиента должен общаться с подсистемами только через Фасад.
   Это позволит сделать код клиента независимым от изменений в коде подсистем. При изменениях модификациям
   будет подвергаться только фасад.
4. Если фасад станет слишком большим, вынесите часть его поведения в новый, более узкоспециализированный класс-фасад.

Примеры использования:
javax.faces.context.ExternalContext использует ServletContext, HttpSession, HttpServletRequest, HttpServletResponse
и другие классы/интерфейсы внутри.
ServletContext и ApplicationContext в Spring
 */
public class TestFacade {
    public static void main(String[] args) {
        VideoConversionFacade convertor = new VideoConversionFacade();
        File mp4Video = convertor.convertVideo("youtube_video.ogg", "mp4");
        System.out.println();

        String plus = """
                1. Позволяет снизить зависимость от подсистем и изолировать рабочий код от клиента .
                """;

        String minus = """
                1. Может стать классом-Богом, связанным со всеми классами в приложении.
                """;

        System.out.println("Плюсы:\n" + plus);
        System.out.println("Минусы:\n" + minus);
    }
}
