package behavioral_patterns.command;

import behavioral_patterns.command.editor.Editor;
/*
Тип шаблона: поведенческий.
Шаги реализации:
1. Создайте общий интерфейс команд и определите в нём метод запуска.
2. Один за другим создайте классы конкретных команд. В каждом классе должно быть поле для хранения ссылки на один
   или несколько объектов-получателей, которым команда будет перенаправлять основную работу.
3. Кроме этого, команда должна иметь поля для хранения параметров, которые нужны при вызове методов получателя.
   Значения всех этих полей команда должна получать через конструктор.
4. И, наконец, реализуйте основной метод команды, вызывая в нём те или иные методы получателя.
5. Добавьте в классы отправителей поля для хранения команд. Обычно объекты-отправители принимают готовые объекты
   команд извне — через конструктор либо через сеттер поля команды.
6. Измените основной код отправителей так, чтобы они делегировали выполнение действия команде.
7. Порядок инициализации объектов должен выглядеть так:
   - Создаём объекты получателей.
   - Создаём объекты команд, связав их с получателями.
   - Создаём объекты отправителей, связав их с командами.

Примеры паттерна:
Все реализации java.lang.Runnable
Все реализации javax.swing.Action
 */
public class TestCommand {
    public static void main(String[] args) {
        Editor editor = new Editor();
        editor.init();

        String plus = """
                1. Убирает прямую зависимость между объектами, вызывающими операции, и объектами,
                   которые их непосредственно выполняют.
                2. Позволяет реализовать простую отмену и повтор операций.
                3. Позволяет реализовать отложенный запуск операций.
                4. Позволяет собирать сложные команды из простых.
                5. Реализует принцип открытости/закрытости.
                """;

        String minus = """
                1. Усложняет код программы из-за введения множества дополнительных классов.
                """;

        System.out.println("Плюсы:\n" + plus);
        System.out.println("Минусы:\n" + minus);
    }

}
